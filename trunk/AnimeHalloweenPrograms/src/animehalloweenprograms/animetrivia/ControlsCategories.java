/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package animehalloweenprograms.animetrivia;

import java.awt.BorderLayout;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Phyllis
 */
public class ControlsCategories extends javax.swing.JPanel {

    /**
     * Creates new form ControlsCategories
     */
    public ControlsCategories() {
        initComponents();

        currRow = currCol = -1;
        above = null;

        String[] colNames = {"Bob Is Cool", "Mark my words..."};
        Object[][] data = new Object[MAX_CATEGORIES][MAX_POINTS];

        for (int i = 0; i < colNames.length; i++) {
            for (int j = 0; j < MAX_POINTS; j++) {
                data[j][i] = new Integer((j + 1) * 100);
                //System.out.println("   " + data[i][j]);
            }
        }

        categories = new JTable(data, colNames);
        categories.setFillsViewportHeight(true);
        categories.getTableHeader().setReorderingAllowed(false);

        //======Get the Row Selected======//
        categories.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ListSelectionModel rowSM = categories.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                //Ignore extra messages.
                if (e.getValueIsAdjusting()) {
                    return;
                }

                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                
                int selectedRow = lsm.getMinSelectionIndex();
                System.out.println("Row " + selectedRow
                        + " is now selected.");
                currRow = selectedRow;
                
                if (currRow > -1 && currCol > -1 && above != null) {
                    above.switchToQuestionAnswer(currCol, currRow);
                    lsm.clearSelection();
                }
            }
        });

        //========Get the Column Selected==========/
        categories.setColumnSelectionAllowed(true);
        ListSelectionModel colSM =
                categories.getColumnModel().getSelectionModel();
        colSM.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                //Ignore extra messages.
                if (e.getValueIsAdjusting()) {
                    return;
                }

                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                
                int selectedCol = lsm.getMinSelectionIndex();
                System.out.println("Column " + selectedCol
                        + " is now selected.");
                currCol = selectedCol;
                
                if (currRow > -1 && currCol > -1 && above != null) {
                    above.switchToQuestionAnswer(currCol, currRow);
                    lsm.clearSelection();
                }
            }
        });

        categoryPanel.setLayout(new BorderLayout());
        categoryPanel.add(categories.getTableHeader(), BorderLayout.PAGE_START);
        categoryPanel.add(categories, BorderLayout.CENTER);
    }

    public void setTriviaControls(TriviaControls above) {
        this.above = above;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        categoryPanel = new javax.swing.JPanel();

        javax.swing.GroupLayout categoryPanelLayout = new javax.swing.GroupLayout(categoryPanel);
        categoryPanel.setLayout(categoryPanelLayout);
        categoryPanelLayout.setHorizontalGroup(
            categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        categoryPanelLayout.setVerticalGroup(
            categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(categoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(categoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel categoryPanel;
    // End of variables declaration//GEN-END:variables
    private JTable categories;
    private int currRow, currCol;
    private TriviaControls above;
    public static final int MAX_CATEGORIES = 5;
    public static final int MAX_POINTS = 5;
}
